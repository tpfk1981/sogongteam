#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<Windows.h>
#include<conio.h>
#define passwordSize 4
#define TRUE 1
#define FALSE 0

typedef struct ADDRESS  // 주소록 정보
{
  char lastName[15];  //성
  char firstName[15];	//(성 제외)이름
  char job[20];		//직책
  char department[20];	//부서
  char company[20];	//회사명
  char homeAddress[60];	//주소
  char homePhone[11];	//전화번호
  char faxNumber[11];	//팩스번호
  char mobilePhone[12];	//휴대전화번호
  char email[40];	//E-mail
  char homepage[50];	//홈페이지
  char CheckedNum; //선택한 번호
} address;

typedef struct NODE
{
  address *sAddress;
  struct NODE *next;
} node;

node *head;
node *tail;

FILE* fp = NULL;
char buff[passwordSize+1];
char inputPassword[passwordSize+1];

int Login();
int IsValidPassword();
void linkedListInit();
void listAddress();
void printListAddress();
void addAddress();
void modifyAddress();
void deleteAddress();
void findAddress();
void changePassword();
void Logout();
int printMainMenu();
void changePassword();
void searchpersonMenu();
void printListAddress();

int main(void)
{
	int login;
	int menuChoice = 0;

	fp = fopen("address_book.txt","r+");
	if(fp == NULL) {
		printf("일치하는 주소록이 없습니다.\n");
		return ;}
	fgets(buff, sizeof(int)*passwordSize, fp);
		
	printf("주소록 시스템에 오신걸 환영합니다.\n\n");

	do { login = Login(); }while( login == FALSE );

	printf("로그인에 성공하였습니다!\n\n");

	linkedListInit();	//연결리스트 초기화
		
	while( login == TRUE && menuChoice != 8 ) 
	{
		menuChoice = printMainMenu();
		if(!(menuChoice >=1 && menuChoice <=8))
		{
			continue;
		}
		
		switch(menuChoice) 
		{
		case 1: 
		  listAddress(); //주소록 전체보기
		  break;
		case 2: 
		  addAddress(); //주소록 추가
		  break;
		case 3: 
		  modifyAddress(); //주소록 수정
		  break;
		case 4: 
		  deleteAddress(); //주소록 삭제
		  break;
		case 5: 
		  findAddress(); //주소록 검색
		  break;
		case 6: 
		  changePassword(); //비밀번호 변경
		  break;
		case 7: 
		  Logout(); //로그아웃
		  break;
		case 8: 
		  exit(1); //종료
		  break;
		default: printf("잘못 입력하셨습니다.\n");
		}
	}

	fclose(fp);
	return 0;
}

int Login()
{	
	printf("사용자의 비밀번호를 입력하세요: ");
	gets(inputPassword);

	while( IsValidPassword() == FALSE ) {
		printf("비밀번호는 네 자리로 입력해주세요\n");
		printf("사용자의 비밀번호를 입력하세요: ");
		gets(inputPassword); }

	if( strcmp(buff,inputPassword) != 0 ) {
		printf("비밀번호가 일치하지 않습니다.\n");
		return FALSE; }
	else return TRUE;

}

int IsValidPassword()
{
	int isValid;
	
	if(strlen(inputPassword) != passwordSize)
		isValid = FALSE;
	else isValid = TRUE;

	return isValid;
}

void linkedListInit()
{
	head = (node *)malloc(sizeof(node));
	tail = (node *)malloc(sizeof(node));

	head->next = tail;
	tail->next = tail;
}

void listAddress()
{
	node *p1;
	node *p2;
	node *p3;
	int count = 0;
	int i, j;
	
	p1 = head->next;
	while(p1 !=tail)	//총 주소록 수 구하기
	{
		count++;
		p1 = p1->next;
	}
	
	for(i=1; i<count; i++)
	{
		p1 = head;
		p2 = head->next;
		p3 = p2->next;
		
		for(j=1; j<=(count-1); j++)
		{
			if(strcmp(p2->sAddress->lastName, p3->sAddress->lastName) < 0 && strcmp(p2->sAddress->firstName, p3->sAddress->firstName) < 0)	//문자열 비교(오름차순)
			{
				p2->next = p3->next;
				p3->next = p2;
				p1->next = p3;
				p1 = p3;
				p3 = p2->next;
			}
			else
			{
				p1 = p2;
				p2 = p3;
				p3 = p3->next;
			}
		}
	}

	system("cls");
	printListAddress();	//리스트 출력
	
	getch();
	
}

void printListAddress()
{
	node *p;
	int k=1;
	p = head ->next;
	
	printf("----------------------------------\n");
	if(p==tail)
	{
		printf("고객 정보가 존재하지 않습니다. \n");
	}
	else
	{
		printf("번호 성\t이름\t휴대전화번호\n");
		while(p!=tail)
		{
			printf(" %d %7s %7s %7s\n", k++, p->sAddress->lastName, p->sAddress->firstName, p->sAddress->mobilePhone);
			p = p->next;
		}
	}	
}

void addAddress()
{
	node *t;
	address *pAddress;
	char temp;
	char lastName[15];	//성
	char firstName[15];	//(성 제외)이름
	char job[20];		//직책
	char department[20];	//부서
	char company[20];	//회사명
	char homeAddress[60];	//주소
	char homePhone[11];	//전화번호
	char faxNumber[11];	//팩스번호
	char mobilePhone[12];	//휴대전화번호
	char email[40];		//E-mail
	char homepage[50];	//홈페이지
	
	t = (node *)malloc(sizeof(node));
	pAddress = (address *)malloc(sizeof(address));
	
	system("cls"); ///
	printf("주소록 추가\n");
	printf("----------------------------------\n");
	printf("1. 성 : "); scanf("%s", pAddress->lastName);
	printf("2. (성 제외) 이름 : "); scanf("%s", pAddress->firstName);
	printf("3. 직책 : "); scanf("%s", pAddress->job);
	printf("4. 부서 : "); scanf("%s", pAddress->department);
	printf("5. 회사명 : "); scanf("%s", pAddress->company);
	printf("6. 주소 : "); scanf("%s", pAddress->homeAddress);
	printf("7. 전화번호 : "); scanf("%s", pAddress->homePhone);
	printf("8. 팩스번호 : "); scanf("%s", pAddress->faxNumber);
	printf("9. 휴대전화번호 : "); scanf("%s", pAddress->mobilePhone);
	printf("10. E-mail : "); scanf("%s", pAddress->email);
	printf("11. 홈페이지 : "); scanf("%s", pAddress->homepage);
	printf("----------------------------------\n\n");
	
	t->sAddress = pAddress;
	
	printf("정말로 등록하시겠습니까? (y/n) : ");
	temp = getch();
	
	if(temp == 'y' || temp == 'Y')
	{
		if(head->next == tail)
		{
			t->next = tail; //데이터가 없을 경우, head와 tail 사이에 직접 삽입
		}
		else
		{
			t->next = head->next;
		}
		head->next = t;
		system("cls");
		printf("등록이 정상적으로 완료되었습니다.\n");
	}
	else
	{
		free(t);
		free(pAddress);
		system("cls");
		printf("등록을 취소하였습니다.\n");
	}
	Sleep(1000);	//1초(1000) 딜레이	
}

void modifyAddress(){
	node *t;
	address *pAddress;
	char temp;
	char lastName[15];	//성
	char firstName[15];	//(성 제외)이름
	char job[20];		//직책
	char department[20];	//부서
	char company[20];	//회사명
	char homeAddress[60];	//주소
	char homePhone[11];	//전화번호
	char faxNumber[11];	//팩스번호
	char mobilePhone[12];	//휴대전화번호
	char email[40];		//E-mail
	char homepage[50];	//홈페이지
	char CheckedNum;
	
	t = (node *)malloc(sizeof(node));
	pAddress = (address *)malloc(sizeof(address));
	char SearchName;

	system("cls");
	
	serchpersonMenu();	//한글자이름명단

	printf("출력된 항목 중 수정하고자 하는 이름을 입력하세요\n");
	scanf;//이름 받기
	//받은 이름에 대하여 

	printf("어떤 항목을 수정하겠습니까\n");
	scanf("%s",CheckedNum);
	switch(CheckedNum) {
		case '1':
		printf("1. 성 : "); scanf("%s", pAddress->lastName); break;
		case '2':
		printf("2. (성 제외) 이름 : "); scanf("%s", pAddress->firstName); break;
		case '3':
		printf("3. 직책 : "); scanf("%s", pAddress->job); break;
		case '4':
		printf("4. 부서 : "); scanf("%s", pAddress->department); break;
		case '5':
		printf("5. 회사명 : "); scanf("%s", pAddress->company); break;
		case '6':
		printf("6. 주소 : "); scanf("%s", pAddress->homeAddress); break;
		case '7':
		printf("7. 전화번호 : "); scanf("%s", pAddress->homePhone); break;
		case '8':
		printf("8. 팩스번호 : "); scanf("%s", pAddress->faxNumber); break;
		case '9':
		printf("9. 휴대전화번호 : "); scanf("%s", pAddress->mobilePhone); break;
		case '10':
		printf("10. E-mail : "); scanf("%s", pAddress->email); break;
		case '11':
		printf("11. 홈페이지 : "); scanf("%s", pAddress->homepage); break;
	}

	printf("정말로 수정하시겠습니까? (y/n) : "); //수정해야 함 
	temp = getch();
	
	if(temp == 'y' || temp == 'Y')
	{
		if(head->next == tail)
		{
			t->next = tail; //데이터가 없을 경우, head와 tail 사이에 직접 삽입
		}
		else
		{
			t->next = head->next;
		}
		head->next = t;
		system("cls");
		printf("수정이 정상적으로 완료되었습니다.\n");
	}
	else
	{
		free(t);
		free(pAddress);
		system("cls");
		printf("수정을 취소하였습니다.\n");
	}
	Sleep(1000);	//1초(1000) 딜레이	
}

void deleteAddress(){
	node *t;
	address *pAddress;
	char temp;
	char lastName[15];	//성
	char firstName[15];	//(성 제외)이름
	char job[20];		//직책
	char department[20];	//부서
	char company[20];	//회사명
	char homeAddress[60];	//주소
	char homePhone[11];	//전화번호
	char faxNumber[11];	//팩스번호
	char mobilePhone[12];	//휴대전화번호
	char email[40];		//E-mail
	char homepage[50];	//홈페이지
	char CheckedNum;

	t = (node *)malloc(sizeof(node));
	pAddress = (address *)malloc(sizeof(address));
	
	system("cls");
	
	t->sAddress = pAddress;
	
	printf("연락처 하나만 삭제하려면 1을, 전체 주소록을 삭제하려면 2를 눌러주세요");
	scanf("%s",CheckedNum);
	switch(CheckedNum) {
		case '1':
			serchpersonMenu();//한글자이름명단
			scanf;//이름 받기
			//받은 이름에 대하여
			//삭제
			break;
		case '2':
			//모두 삭제
			break;
	}
	printf("정말로 삭제하시겠습니까? (y/n) : ");
	temp = getch();
	
	if(temp == 'y' || temp == 'Y') //수정해야 함 
	{
		if(head->next == tail)
		{
			t->next = tail; //데이터가 없을 경우, head와 tail 사이에 직접 삽입
		}
		else
		{
			t->next = head->next;
		}
		head->next = t;
		system("cls");
		printf("삭제가 정상적으로 완료되었습니다.\n");
	}
	else
	{
		free(t);
		free(pAddress);
		system("cls");
		printf("삭제를 취소하였습니다.\n");
	}
	Sleep(1000);	//1초(1000) 딜레이	
}
void findAddress(){

	serchpersonMenu();
	
	scanf //찾을 이름 받기 
	printListAddress();	//리스트 출력
}

void changePassword(){;}
void Logout(){

	node *t;
	address *pAddress;
	char temp;

	printf("정말로 종료하시겠습니까? (y/n) : "); //종료해야 함 
	temp = getch();
	
	if(temp == 'y' || temp == 'Y')
	{
		if(head->next == tail)
		{
			t->next = tail; //데이터가 없을 경우, head와 tail 사이에 직접 삽입
		}
		else
		{
			t->next = head->next;
		}
		head->next = t;
		system("cls");
		printf("종료가 정상적으로 완료되었습니다.\n");
	}
	else
	{
		free(t);
		free(pAddress);
		system("cls");
		printf("종료를 취소하였습니다.\n");
	}
}
/*
void searchpersonMenu(){

	node *t;
	address *pAddress;
	char temp;
	char lastName[15];	//성
	char firstName[15];	//(성 제외)이름
	char job[20];		//직책
	char department[20];	//부서
	char company[20];	//회사명
	char homeAddress[60];	//주소
	char homePhone[11];	//전화번호
	char faxNumber[11];	//팩스번호
	char mobilePhone[12];	//휴대전화번호
	char email[40];		//E-mail
	char homepage[50];	//홈페이지
	char CheckedNum;
	char SearchName[15];

	t = (node *)malloc(sizeof(node));
	pAddress = (address *)malloc(sizeof(address));
	
	system("cls");
	
	t->sAddress = pAddress;

scanf("%s",SearchName);	//1. 한 글자 입력받음

	for (int i=0; i++; i<15){	//2. 주소록에 저장되어 있던 사람과 대조
		for (int j=0; j++; j<15){
			if (SearchName[i] == (lastName[j]||firstName[j]))
			{printf("\n");}	//3. 입력받은 글자가 포함된 사람 명단 출력
		}
	
	}
}
struct Node *FindNodebyID(struct Node *Start,struct Node *aNode)
{
	struct Node *Now;
	
	for (Now=Start->next;Now;Now=Now->next) {
			if (strcmp(Now->ID,aNode->ID)==0) {
				return Now;
			}
		}
		return Now;//NULL 이다.
}




	3. 입력받은 글자가 포함된 사람 명단 출력
	return 명단;
		
		struct Node *FindNodebyID(struct Node *Start,struct Node *aNode)
{
	struct Node *Now;
	
	for (Now=Start->next;Now;Now=Now->next) {
			if (strcmp(Now->ID,aNode->ID)==0) {
				return Now;
			}
		}
		return Now;//NULL 이다.
}

		
		
		
		
}

/*
1. 한 글자 입력받음
2. 주소록에 저장되어 있던 사람과 대조
3. 입력받은 글자가 포함된 사람 명단 출력
return 명단;

	사용자가 어떤 사람에 대해 저장을 했는지 여부를 알기 위해 숫자 ‘5’를 누르고 ‘Enter’를 쳤다. 
	화면에 검색하고자 하는 이름의 한 글자를 입력하라고 하길래 ‘강’을 쓰고 ‘Enter’를 쳤다. 
	화면에는 ‘강’을 포함한 이름을 가진 목록들이 나온다.

	scanf("%s",SearchName);
	if (SearchName==*lastName){}
	if (SearchName==*firstName){}
	//출력
*/

int printMainMenu()			//리스트 출력
{
	int menuChoice;
	system("cls");
	printf("메인 메뉴\n");
	printf("----------------------------------\n");
	printf("1. 주소록 전체보기\n");
	printf("2. 주소록 추가\n");
	printf("3. 주소록 수정\n");
	printf("4. 주소록 삭제\n");
	printf("5. 주소록 검색\n");
	printf("6. 비밀번호 변경\n");
	printf("7. 로그아웃\n");
	printf("8. 종료\n");
	printf("----------------------------------\n\n");
	printf("번호를 입력하세요(1~8) : ");
	scanf("%d", &menuChoice);
	fflush(stdin); //버퍼 삭제
	return menuChoice;
}
void printListAddress() //리스트 출력
{
	/*char ListAddress;
	system("cls");
	printf("메인 메뉴\n");
	printf("----------------------------------\n");
	printf("1. 주소록 전체보기\n");
	printf("2. 주소록 추가\n");
	printf("3. 주소록 수정\n");
	printf("4. 주소록 삭제\n");
	printf("5. 주소록 검색\n");
	printf("6. 비밀번호 변경\n");
	printf("7. 로그아웃\n");
	printf("8. 종료\n");
	printf("----------------------------------\n\n");
	printf("번호를 입력하세요(1~8) : ");
	scanf("%d", &ListAddress);
	fflush(stdin); //버퍼 삭제
	return ListAddress;*/
}
